{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","types.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","state","searchField","this","requestRobots","isPending","error","setRobots","filteredRobots","filter","robot","toLowerCase","includes","e","target","value","React","Component","connect","payload","dispatch","fetch","then","response","json","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialSearchState","initialRequestState","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.69b972d8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {setRobots, requestRobots} from '../actions';\n\nclass App extends React.Component{\n\n  state = {\n    robots: [],\n    searchField: ''\n  }\n\n  componentDidMount(){\n    this.props.requestRobots();\n  }\n\n  render(){\n    const {robots, error, isPending, searchField, setRobots} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n\n    return isPending?\n    <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={(e) => setRobots(e.target.value)}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n\n  }\n}\n\n \n  \n\n\nconst mapStateToProps = ({requestRobots, setRobots}) => ({\n  searchField: setRobots.searchField,\n  isPending: requestRobots.isPending,\n  robots: requestRobots.robots,\n  error: requestRobots.error\n\n\n})\n\n\n\nexport default connect(mapStateToProps, {setRobots, requestRobots})(App);","import {\n    SET_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED} from './types';\n\nexport const setRobots = (searchField) => ({\n    type: SET_SEARCH_FIELD,\n    payload: searchField\n})\n\nexport const requestRobots = () => dispatch => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(robots => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: robots}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const SET_SEARCH_FIELD = 'SET_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n    SET_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED} from './types';\n\nconst initialSearchState = {\n    searchField: ''\n}\n\nexport const setRobots = (state = initialSearchState, action = {}) => {\n    switch(action.type){\n        case SET_SEARCH_FIELD:\n            return {...state, searchField: action.payload}\n        default:\n            return state;\n    }\n}\n\nconst initialRequestState = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialRequestState, action = {}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true}\n        case REQUEST_ROBOTS_SUCCESS: \n            return {...state, robots: action.payload, isPending: false}\n        case REQUEST_ROBOTS_FAILED:\n            return {...state, error: action.payload, isPending: false}\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport {Provider} from 'react-redux';\nimport {combineReducers, applyMiddleware, createStore} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons'; \n\nimport {requestRobots, setRobots} from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({requestRobots, setRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}